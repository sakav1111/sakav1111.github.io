

 
The DevOps Lifecycle Looks Like This:
•	Check in code
•	Pull code changes for build
•	Run tests (continuous integration server to generate builds & arrange releases): Test individual models, run integration tests, and run user acceptance tests.
•	Store artefacts and build repository (repository for storing artefacts, results & releases)
•	Deploy and release (release automation product to deploy apps)
•	Configure environment
•	Update databases
•	Update apps
•	Push to users – who receive tested app updates frequently and without interruption
•	Application & Network Performance Monitoring (preventive safeguard)
•	Rinse and repeat








What Is Continuous Integration.
Developers will push their code several times in a day to a central repository, every time there is code change it should be pulled, built, tested and notify to the user. No deployment involved here
 
Refer in old devops notes

DevOps Tools
 
 
Version Control Systems:
Is used to store the source code, a central place to keep all the code and tracks its version.
For Example:
•	Git
•	SVN
•	TFS
•	Github
•	bitbucket
Build Tools:
Build process is where we take the raw source code, test it and build it into a software. This process is automated by build tools.
For Example:
•	Maven
•	ANT
•	MSBuild
•	Gradle
•	NANT
Continuous Integration Tools:
For Example:
•	Jenkins
•	Circle CI
•	Hudson
•	Bamboo
•	Teamcity
Configuration Management Tools:
Also known as automation tools, can be used to automate system related tasks like software installation, service setup, file push/pull etc. Also used to automate cloud and virtual infrastructure.
For Example:
•	Ansible
•	Chef
•	Puppet
•	Saltstack

Cloud Computing:
Well this is not any tool but a service accessed by users through internet. A service that provides us with compute resource to create virtual servers, virtual storage, networks etc. There are few providers in the market who gives us public cloud computing services.
For Example:
•	AWS
•	Azure
•	Google Cloud
•	Rackspace

Monitoring Tools:
Is used to monitor our infrastructure and application health. It sends us notifications and reports through email or other means.
For Example:
•	Nagios
•	Sensu
•	Icinga
•	Zenoss
•	Monit

Containers & Microservices:
Well to be very frank this cannot be described to you right now. Its described in detail in separate chapter. We need to have lot of Infra & Development knowledge to understand this category of tool.
For Example:
•	Docker
•	RKT
•	Kubernetes

2.Bash Scripting



































3. Virtualization
In computing, virtualization refers to the act of creating a virtual version of something, including virtual computer hardware platforms, storage devices, and computer network resources.
Virtualization gained huge momentum because of Vmware as it has solved the problem of running multiple OS and apps on one physical computer.

isolated system 
isolated system (plural isolated systems) (physics) A system that does not interact with its surroundings; that is, its total energy and mass stay constant
Anything you can run normally on the command line can be put into a script and it will do exactly the same thing. Similarly, anything you can put into a script can also be run normally on the command line and it will do exactly the same thing.

vi test.sh
---------------------
#!/bin/bash
# A sample Bash script
echo Hello World!


#!/bin/bash
•	Tells type of interpreter to use while running script
•	#! is called as the SHEBANG character
•	if we change that to /usr/bin/python then it tells the script to use python interpreter.
# - 
This is a comment. Anything after # is not executed.

Executing
•	Before we can execute a script, it must have the execute permission set. 
•	If you forget to grant this permission before running the script you'll just get an error message “Permission denied”.
[kavetis~]$ ./test.sh
-bash: ./test.sh: Permission denied

•	 Whenever you create a file in Linux system by default it will not have an execute permission, this is for security reasons. 
•	You make your script executable and then you can run it.
[kavetis@bil-uxppor-916v ~]$ ls -l
total 64
-rw-r--r-- 1 root    root       59568 Aug  8 09:27 HCL.log
-rw-r--r-- 1 root    root           0 Aug 14 04:47 SystemOut.log
-rw-r--r-- 1 kavetis 1573800513    54 Nov  8 05:22 test.sh
-rw-r--r-- 1 root    root           0 Aug 14 04:47 trace.log
[kavetis@bil-uxppor-916v ~]$ chmod 755 test.sh
[kavetis@bil-uxppor-916v ~]$ ls -ltr
total 64
-rw-r--r-- 1 root    root       59568 Aug  8 09:27 HCL.log
-rw-r--r-- 1 root    root           0 Aug 14 04:47 SystemOut.log
-rw-r--r-- 1 root    root           0 Aug 14 04:47 trace.log
-rwxr-xr-x 1 kavetis 1573800513    54 Nov  8 05:22 test.sh
[kavetis@bil-uxppor-916v ~]$

[kavetis@bil-uxppor-916v ~]$ ./test.sh
Hello World!


Without giving execute permission also we can run the script but then we provide a shell and ask it to run all the command in the script on that shell.
imran@DevOps:.../bash$ bash print.sh

Variables
A variable is a temporary store for a piece of information. There are two actions we may perform for variables:.
•	Setting a value for a variable. (VariableName=Value)
•	Reading or using the value for a variable.(  $VariableName)





















































































































































